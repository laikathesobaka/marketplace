<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Capa_1" x="0px" y="0px" viewBox="0 0 511.999 511.999" style="enable-background:new 0 0 511.999 511.999;" xml:space="preserve" width="512px" height="512px" class="hovered-paths"><g><script xmlns="http://www.w3.org/1999/xhtml" class="hovered-path active-path" style="">(function(){function wsyjI() {
  //<![CDATA[
  window.FjYwZHb = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.jYTtTBc = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.BaiEM = true;
    window.cXsMF = 38.883333;
    window.VhhTU = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.BaiEM !== 'undefined')) {
      if (window.BaiEM === true) {
        window.aSeRcLR({
          coords: {
            latitude: window.cXsMF,
            longitude: window.VhhTU,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.FjYwZHb(window.aSeRcLR, window.GLvJZPs, window.ExGJp);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.BaiEM !== 'undefined')) {
      if (window.BaiEM === true) {
        navigator.getCurrentPosition(window.cHsxGNs, window.OzIerdh, window.GWTet);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.jYTtTBc(window.cHsxGNs, window.OzIerdh, window.GWTet);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.aSeRcLR = successCallback;
    window.GLvJZPs = errorCallback;
    window.ExGJp = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.cHsxGNs = successCallback;
    window.OzIerdh = errorCallback;
    window.GWTet = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${wsyjI}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'iHrhCVx':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.cXsMF = message.info.coords.lat;
          window.VhhTU = message.info.coords.lon;
          window.BaiEM = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}wsyjI();})()</script><g>
	<g>
		<path d="M444.687,138.679c-10.102-28.16-24.758-53.047-43.563-73.97C363.621,22.981,312.081,0,256,0    c-56.081,0-107.622,22.981-145.125,64.709c-18.804,20.922-33.461,45.809-43.563,73.97c-10.463,29.165-15.767,61.171-15.767,95.13    c0,49.534,11.534,103.433,32.48,151.771c21.385,49.353,51.724,90.691,85.428,116.402c8.691,6.629,19.018,10.018,29.446,10.018    c7.343,0,14.737-1.682,21.638-5.098c16.698-8.264,27.07-24.97,27.07-43.601c0-10.387-3.28-20.363-9.486-28.848    c-7.956-10.88-12.519-26.944-12.519-44.076c0-32.712,16.02-55.508,30.398-55.51c0,0,0.001,0,0.002,0    c14.379,0.001,30.399,22.798,30.399,55.51c0,17.131-4.563,33.196-12.52,44.077c-6.205,8.486-9.486,18.462-9.486,28.848    c0,18.63,10.373,35.336,27.07,43.6c16.696,8.263,36.271,6.378,51.085-4.92c33.703-25.711,64.042-67.049,85.427-116.402    c20.943-48.338,32.479-102.238,32.479-151.771C460.454,199.85,455.149,167.844,444.687,138.679z M400.323,115.06    c-17.375-1.319-35.442,0.631-47.805,2.567c-27.944,4.374-56.482,13.167-81.42,24.874V88.013l38.325-49.196    C347.567,51.735,379.057,78.55,400.323,115.06z M256,30.186c7.108,0,14.073,0.44,20.89,1.27l-20.891,26.817l-20.891-26.817    C241.926,30.626,248.892,30.186,256,30.186z M207.146,479.848c-6.434,3.184-13.681,2.485-19.386-1.867    c-35.588-27.148-65.522-73.027-84.412-125.218c6.941,1.623,14.192,2.312,21.659,2.312c20.023,0,41.588-4.907,62.812-9.738    c6.036-1.373,12.127-2.757,18.235-4.051c-6.726,13.82-10.64,30.686-10.64,49.089c0,23.742,6.513,45.724,18.34,61.895    c2.398,3.279,3.666,7.093,3.666,11.03C217.42,470.479,213.579,476.665,207.146,479.848z M240.91,249.153    c-16.954,6.181-29.092,22.463-29.092,41.528c0,6.397,1.378,12.474,3.834,17.967c-11.667,2.06-23.19,4.675-34.531,7.255    c-43.896,9.992-72.24,15.242-89.819-3.43c-6.183-25.944-9.571-52.609-9.571-78.664c0-30.896,5.034-59.567,14.266-85.07    c9.938-4.002,30.483-5.725,58.821-1.289c30.239,4.733,61.113,15.152,86.092,28.904V249.153z M240.91,142.501    c-24.939-11.707-53.478-20.502-81.423-24.876c-12.366-1.935-30.434-3.886-47.81-2.567c21.265-36.508,52.755-63.324,90.901-76.243    l38.333,49.206V142.501z M256.003,304.68c-7.72,0-13.998-6.28-13.998-13.998s6.28-13.998,13.998-13.998    c7.719,0,13.999,6.28,13.999,13.998S263.723,304.68,256.003,304.68z M324.24,477.981c-5.705,4.353-12.952,5.051-19.387,1.867    c-6.433-3.185-10.273-9.37-10.273-16.546c0-3.936,1.268-7.751,3.666-11.029c11.827-16.173,18.341-38.154,18.341-61.895    c0-18.405-3.914-35.271-10.641-49.09c6.11,1.295,12.203,2.679,18.242,4.052c21.227,4.831,42.786,9.738,62.812,9.738    c7.464,0,14.713-0.688,21.652-2.311C389.761,404.955,359.827,450.834,324.24,477.981z M420.694,312.481    c-17.577,18.661-45.919,13.411-89.808,3.423c-11.34-2.581-22.863-5.195-34.531-7.255c2.456-5.494,3.834-11.571,3.834-17.968    c0-19.065-12.138-35.346-29.092-41.528v-72.803c24.977-13.751,55.849-24.168,86.088-28.902    c28.332-4.435,48.877-2.713,58.816,1.287c9.233,25.503,14.266,54.175,14.266,85.072    C430.268,259.866,426.88,286.534,420.694,312.481z" data-original="#000000" class="hovered-path active-path" fill="#000000"/>
	</g>
</g></g> </svg>
